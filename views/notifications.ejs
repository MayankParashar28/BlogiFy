<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/header') %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>

        :root {
            --bg-color: #f5f5f5;
            --text-color: #333;
            --card-bg: #fff;
            --border-color: #ddd;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            font-size: 24px;
            margin: 20px 0;
            color: #007bff;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
        }

        .header img {
            padding: 5px;
            border-radius: 50%;
            margin-right: 10px;
            width: 80px;
            height: 80px;
            object-fit: cover;
            box-shadow: 10px 12px 14px rgba(40, 10, 40, 0.1);
            border: 1px solid #007bff;
        }

        .container {
            width: 100%;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--bg-color);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #notifications {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        #notifications li {
            margin-bottom: 10px;
            padding: 10px;
            background-color: var(--card-bg);
            border-radius: 4px;
            border: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #notifications li.read {
            background-color: #e0e0e0;
            opacity: 0.7;
        }

        #notifications li button {
            padding: 5px 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #notifications li button:hover {
            background-color: #0056b3;
        }

        /* Theme toggle button styles */
    .theme-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: var(--card-bg);
        border: 2px solid var(--border-color);
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 10px var(--shadow-color);
        z-index: 1000;
        transition: all 0.3s ease;
      }
  
      .theme-toggle:hover {
        transform: scale(1.1);
      }
  
      .theme-toggle i {
        font-size: 1.5rem;
        color: var(--text-color);
      }

.dark-theme {
    --bg-color: #1e1e1e;
    --card-bg: #2c2c2c;
    --border-color: #444;
    --shadow-color: rgba(255, 255, 255, 0.1);
}

body {
    background-color: var(--bg-color);
    color: var(--text-color);
}

.message {
    color: var(--text-color);
}

.message {
    color: var(--text-color);
}

.dark-theme .message {
    color: #ffffff; /* White text in dark mode */
}
      
    </style>
</head>

<body>
    <%- include('./partials/nav', { searchQuery: searchQuery || '' }) %>

    <div class="header">
        <h2> 🔔 Notifications </h2>
        <img src="<%=user.profilePic  %>" alt="notification" width="100px" height="100px">
    </div>

    <div class="container">
        <% if (notifications.length === 0) { %>
            <p class="no-notifications">No new notifications.</p>
        <% } else { %>
            <ul id="notifications">
                <% notifications.forEach(notification => { %>
                    <li id="notif-<%= notification._id %>" class="<%= notification.read ? 'read' : '' %>">
                        <div class="notif-message">
                            <img src="<%= (notification.senderId && notification.senderId.profilePic) ? notification.senderId.profilePic : '/images/default-user.png' %>"
                                alt="Profile" width="40" height="40">
                            <strong class="message">
                                <%= notification.message %>
                            </strong>
                            <small>(<%= new Date(notification.createdAt).toLocaleString() %>)</small>
                        </div>
                        <% if (!notification.read) { %>
                            <button class="mark-read-btn" data-id="<%= notification._id %>">Mark as Read</button>
                        <% } %>
                    </li>
                <% }) %>
            </ul>
        <% } %>
    </div>

    <%- include('./partials/footer') %>

    <!-- Theme Toggle Button -->
    <div class="theme-toggle">
        <i class="fas"></i>
    </div>

    <script>
        // Theme handling
        document.addEventListener("DOMContentLoaded", () => {
            const themeToggle = document.querySelector('.theme-toggle');
            const html = document.documentElement;
            const icon = themeToggle.querySelector('i');

            // Check for saved theme preference
            const getPreferredTheme = () => {
                const savedTheme = localStorage.getItem('theme');
                return savedTheme || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            };

            // Apply theme
            const setTheme = (theme) => {
                html.classList.toggle('dark-theme', theme === 'dark');
                localStorage.setItem('theme', theme);
                
                icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';

                // Dispatch event for navbar
                window.dispatchEvent(new CustomEvent('themeChange', { detail: { theme } }));
            };

            // Initialize theme
            const initTheme = getPreferredTheme();
            setTheme(initTheme);

            // Toggle theme on button click
            themeToggle.addEventListener('click', () => {
                const currentTheme = html.classList.contains('dark-theme') ? 'dark' : 'light';
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                setTheme(newTheme);
            });

            // Listen for system theme changes
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                if (!localStorage.getItem('theme')) {
                    setTheme(e.matches ? 'dark' : 'light');
                }
            });

            // Listen for theme changes from navbar
            window.addEventListener('themeChange', (e) => {
                setTheme(e.detail.theme);
            });
        });
    </script>

    <script> // Notification handling
        // Function to mark notification as read
        async function markAsRead(notificationId) {
            try {
                const response = await fetch(`/notifications/mark-read/${notificationId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                });

                const data = await response.json();

                if (data.success) {
                    const notifElement = document.getElementById(`notif-${notificationId}`);
                    if (notifElement) {
                        notifElement.classList.add("read");
                        const button = notifElement.querySelector(".mark-read-btn");
                        if (button) button.remove(); // Hide the button after marking as read
                    }

                    // Update notification count badge
                    const notifCount = document.getElementById("notification-count");
                    if (notifCount) notifCount.textContent = data.count;
                } else {
                    alert("Failed to mark notification as read.");
                }
            } catch (error) {
                console.error("❌ Error marking notification as read:", error);
            }
        }

        // Attach event listeners to buttons
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".mark-read-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const notificationId = this.getAttribute("data-id");
                    markAsRead(notificationId);
                });
            });
        });
    </script>
</body>

</html>